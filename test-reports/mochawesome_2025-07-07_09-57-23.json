{
  "stats": {
    "suites": 6,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-07T01:57:22.855Z",
    "end": "2025-07-07T01:57:23.579Z",
    "duration": 724,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b30c2376-6e77-4d50-9485-63b9256eac4f",
      "title": "",
      "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
      "file": "\\test\\Auction.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65e085dc-53ee-4de7-8087-3f3fe1e9d8f7",
          "title": "Auction Contract",
          "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
          "file": "\\test\\Auction.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Auction Contract\"",
              "fullTitle": "Auction Contract \"before each\" hook in \"Auction Contract\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[deployer, bidder1, bidder2] = await ethers.getSigners();\n// 部署 NFT\nconst MyNFT = await ethers.getContractFactory(\"MyNFT\");\nnft = await MyNFT.deploy();\nawait nft.waitForDeployment();\n// 铸造 NFT 给部署者\nconst mintTx = await nft.mint(deployer.address);\nawait mintTx.wait();\n// 部署 Mock Chainlink Aggregator\nconst MockV3Aggregator = await ethers.getContractFactory(\"MockV3Aggregator\");\nmockPriceFeed = await MockV3Aggregator.deploy(8, 2000e8); // $2000 per ETH\nawait mockPriceFeed.waitForDeployment();\n// 获取 Auction 合约工厂\nconst Auction = await ethers.getContractFactory(\"Auction\");\n// 使用 Hardhat Upgrades 插件部署代理合约，并注入 Mock 预言机\nauctionProxy = await upgrades.deployProxy(Auction, [\n    deployer.address,\n    nft.target,\n    tokenId,\n    duration,\n    mockPriceFeed.target, // 使用 mock 替代真实预言机\n], { initializer: \"initialize\" });\nawait auctionProxy.waitForDeployment();\n// 获取代理合约地址并授权\nconst auctionAddress = await auctionProxy.getAddress();\n// 授权 NFT 给拍卖合约地址\nconst proxyApproveTx = await nft.connect(deployer).approve(auctionAddress, tokenId);\nawait proxyApproveTx.wait();\n// 将 NFT 转移到拍卖合约\nawait nft.connect(deployer)[\"safeTransferFrom(address,address,uint256)\"](deployer.address, auctionAddress, tokenId);",
              "err": {},
              "uuid": "a17c71ef-ff14-4407-bd56-b22039d6df42",
              "parentUUID": "65e085dc-53ee-4de7-8087-3f3fe1e9d8f7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3df7e8d9-5e26-4ed2-bd84-a50be9b405e3",
              "title": "Initialization",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize auction correctly",
                  "fullTitle": "Auction Contract Initialization should initialize auction correctly",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const auctionInfo = await auctionProxy.auction();\nexpect(auctionInfo.seller).to.equal(deployer.address);\nexpect(auctionInfo.nftContract).to.equal(nft.target);\nexpect(auctionInfo.tokenId).to.equal(tokenId);\nexpect(await nft.ownerOf(tokenId)).to.equal(await auctionProxy.getAddress());",
                  "err": {},
                  "uuid": "e3e4e0c1-caf6-4c32-b365-b7b51ec09ac2",
                  "parentUUID": "3df7e8d9-5e26-4ed2-bd84-a50be9b405e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3e4e0c1-caf6-4c32-b365-b7b51ec09ac2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "163067c2-fbb3-4275-bcae-5f2373991308",
              "title": "Bidding Logic",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow a bid and update highest bidder",
                  "fullTitle": "Auction Contract Bidding Logic should allow a bid and update highest bidder",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.1\");\nawait auctionProxy.connect(bidder1).placeBid({ value: bidAmount });\nconst auctionInfo = await auctionProxy.auction();\nexpect(auctionInfo.highestBidder).to.equal(bidder1.address);\nexpect(auctionInfo.highestBid).to.equal(bidAmount);",
                  "err": {},
                  "uuid": "34082772-79e0-429b-8827-722d94766a8d",
                  "parentUUID": "163067c2-fbb3-4275-bcae-5f2373991308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if seller tries to bid",
                  "fullTitle": "Auction Contract Bidding Logic should revert if seller tries to bid",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.1\");\nawait expect(\n    auctionProxy.connect(deployer).placeBid({ value: bidAmount })\n).to.be.revertedWith(\"Seller cannot bid\");",
                  "err": {},
                  "uuid": "67500cf0-8a82-406a-8258-d0e24e204186",
                  "parentUUID": "163067c2-fbb3-4275-bcae-5f2373991308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if bid is not higher than current",
                  "fullTitle": "Auction Contract Bidding Logic should revert if bid is not higher than current",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.05\");\nawait auctionProxy.connect(bidder1).placeBid({ value: bidAmount });\nawait expect(\n    auctionProxy.connect(bidder2).placeBid({ value: bidAmount })\n).to.be.revertedWith(\"Bid too low\");",
                  "err": {},
                  "uuid": "eb4d1079-0d09-4912-b8b2-9d673990eece",
                  "parentUUID": "163067c2-fbb3-4275-bcae-5f2373991308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if auction has ended",
                  "fullTitle": "Auction Contract Bidding Logic should revert if auction has ended",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 快进时间到拍卖结束后\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait expect(\n    auctionProxy.connect(bidder1).placeBid({ value: ethers.parseEther(\"0.1\") })\n).to.be.revertedWith(\"Auction ended\");",
                  "err": {},
                  "uuid": "7706d5d3-ff66-456d-af2d-2a631a9f259f",
                  "parentUUID": "163067c2-fbb3-4275-bcae-5f2373991308",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34082772-79e0-429b-8827-722d94766a8d",
                "67500cf0-8a82-406a-8258-d0e24e204186",
                "eb4d1079-0d09-4912-b8b2-9d673990eece",
                "7706d5d3-ff66-456d-af2d-2a631a9f259f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "d8401df7-0b3f-4d27-94b8-34f4f4b392e2",
              "title": "Ending Auction",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should end auction and transfer NFT to winner",
                  "fullTitle": "Auction Contract Ending Auction should end auction and transfer NFT to winner",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.1\");\nawait auctionProxy.connect(bidder1).placeBid({ value: bidAmount });\n// 快进时间\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait auctionProxy.endAuction();\nconst owner = await nft.ownerOf(tokenId);\nexpect(owner).to.equal(bidder1.address);",
                  "err": {},
                  "uuid": "2ee252ec-41cc-4723-8ac8-f4a7b6f78884",
                  "parentUUID": "d8401df7-0b3f-4d27-94b8-34f4f4b392e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return NFT if no bids",
                  "fullTitle": "Auction Contract Ending Auction should return NFT if no bids",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 不出价直接结束\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait auctionProxy.endAuction();\nconst owner = await nft.ownerOf(tokenId);\nexpect(owner).to.equal(deployer.address);",
                  "err": {},
                  "uuid": "dd1804a1-db71-4617-8f1c-e472c7c42e4e",
                  "parentUUID": "d8401df7-0b3f-4d27-94b8-34f4f4b392e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if called before auction ends",
                  "fullTitle": "Auction Contract Ending Auction should revert if called before auction ends",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(\n    auctionProxy.endAuction()\n).to.be.revertedWith(\"Auction not ended\");",
                  "err": {},
                  "uuid": "11644a04-1a5b-48f3-a9f3-0dedc2d41739",
                  "parentUUID": "d8401df7-0b3f-4d27-94b8-34f4f4b392e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if called by unauthorized user",
                  "fullTitle": "Auction Contract Ending Auction should revert if called by unauthorized user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 快进时间\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait expect(\n    auctionProxy.connect(bidder1).endAuction()\n).to.be.revertedWith(\"Not authorized\");",
                  "err": {},
                  "uuid": "72f20e14-bfe1-47e1-a63c-7f973c46d2d8",
                  "parentUUID": "d8401df7-0b3f-4d27-94b8-34f4f4b392e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ee252ec-41cc-4723-8ac8-f4a7b6f78884",
                "dd1804a1-db71-4617-8f1c-e472c7c42e4e",
                "11644a04-1a5b-48f3-a9f3-0dedc2d41739",
                "72f20e14-bfe1-47e1-a63c-7f973c46d2d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "98770ce8-dd0e-4272-aefb-6645d9048b5a",
              "title": "Price Calculation",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get correct ETH/USD price",
                  "fullTitle": "Auction Contract Price Calculation should get correct ETH/USD price",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const price = await auctionProxy.getEthUsdPrice();\nexpect(price).to.be.gt(0);",
                  "err": {},
                  "uuid": "d883672d-ed82-4da5-8991-5f29b138d3a6",
                  "parentUUID": "98770ce8-dd0e-4272-aefb-6645d9048b5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should calculate USD value of ETH correctly",
                  "fullTitle": "Auction Contract Price Calculation should calculate USD value of ETH correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ethAmount = ethers.parseEther(\"0.5\"); // BigInt\nconst ethPrice = await auctionProxy.getEthUsdPrice(); // assume this is also a BigInt\n\n           // 使用 ethers.utils.formatUnits 转换后再做乘法\n           const ethAmountInEth = Number(ethers.formatEther(ethAmount));\n           const ethPriceInUsd = Number(ethers.formatUnits(ethPrice, 8)); // 根据预言机精度调整 decimals\n           const expected = ethAmountInEth * ethPriceInUsd;",
                  "err": {},
                  "uuid": "bc69a51a-4d58-49c0-aca4-cfa21ba3546f",
                  "parentUUID": "98770ce8-dd0e-4272-aefb-6645d9048b5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d883672d-ed82-4da5-8991-5f29b138d3a6",
                "bc69a51a-4d58-49c0-aca4-cfa21ba3546f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "c260ce31-cb70-4503-b993-ef71ce9cc0de",
              "title": "UUPS Upgrade Support",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should upgrade contract successfully",
                  "fullTitle": "Auction Contract UUPS Upgrade Support should upgrade contract successfully",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 部署新版本\nconst AuctionV2 = await ethers.getContractFactory(\"AuctionV2\");\n// 升级代理\nconst upgradedProxy = await upgrades.upgradeProxy(await auctionProxy.getAddress(), AuctionV2);\nawait upgradedProxy.waitForDeployment();\n// 验证状态是否保留\nconst auctionInfo = await upgradedProxy.auction();\nexpect(auctionInfo.seller).to.equal(deployer.address);",
                  "err": {},
                  "uuid": "136f4289-ad33-4cdf-869e-b0b4e6b900aa",
                  "parentUUID": "c260ce31-cb70-4503-b993-ef71ce9cc0de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only allow owner to upgrade",
                  "fullTitle": "Auction Contract UUPS Upgrade Support should only allow owner to upgrade",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [deployer, bidder1] = await ethers.getSigners();\n\n// 部署新版本合约\nconst AuctionV2 = await ethers.getContractFactory(\"AuctionV2\");\nconst auctionV2Impl = await AuctionV2.deploy();\nawait auctionV2Impl.waitForDeployment();\n\n// 获取代理合约实例\nconst proxyAddress = await auctionProxy.getAddress();\nconst proxy = await ethers.getContractAt(\"Auction\", proxyAddress);\n\nconsole.log(\"Proxy Owner:\", await proxy.owner());\nconsole.log(\"Bidder1:\", bidder1.address);\nconsole.log(\"AuctionV2 Implementation:\", auctionV2Impl.target);\n\n// 非owner尝试升级 - 应该被拒绝\nawait expect(\n    proxy.connect(bidder1).adminUpgradeTo(auctionV2Impl.target)\n).to.be.revertedWithCustomError(proxy, \"OwnableUnauthorizedAccount\")\n .withArgs(bidder1.address);\n\n// 验证合约未升级 终于\nconst currentImpl = await upgrades.erc1967.getImplementationAddress(proxyAddress);\nexpect(currentImpl).not.to.equal(auctionV2Impl.target);",
                  "err": {},
                  "uuid": "8b3bbb58-b29d-42d6-9874-7c4619849d45",
                  "parentUUID": "c260ce31-cb70-4503-b993-ef71ce9cc0de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "136f4289-ad33-4cdf-869e-b0b4e6b900aa",
                "8b3bbb58-b29d-42d6-9874-7c4619849d45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "yyyy-mm-dd_HH-MM-ss"
      },
      "version": "6.2.0"
    }
  }
}